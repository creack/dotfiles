#+TITLE: Emacs Config
#+AUTHOR: Guillaume J. Charmes
#+TOC: true
#+DATE: [2020-05-02 Sat]

* Bootstrap
Initial steps to bootstrap the config.

** Configure package sources

Add repositories from which we'll load packages.
Setting =package-enable-at-startup= to =nil= prevents a second package load and slightly improves startup time.
Setting the TLS version is needed in emacs 26 to be able to pull from the gnu.org repo.

#+begin_src emacs-lisp :tangle yes
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"
        package-enable-at-startup nil
        package-archives '(("gnu"   . "https://elpa.gnu.org/packages/")
                           ("melpa" . "https://melpa.org/packages/")
                           ("org"   . "https://orgmode.org/elpa/")))
#+end_src

** Setup use-package

If =use-package= is not installed, install it.

#+begin_src emacs-lisp :tangle yes
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package)
    (eval-when-compile (require 'use-package)))
#+end_src

Set =ensure= by default to install packages from the remote repositories. This is equivalent to setting =:ensure t= on each call to =use-package=.
To disable, set =:ensure nil= or =:load-path=.

#+begin_src emacs-lisp :tangle yes
  (setq use-package-always-ensure t)
#+end_src

** Benchmark Init

=benchmark-init= records startup time by package so we can debug.
It only records things after it's initialised, so put as early in config as possible.

#+begin_src emacs-lisp :tangle yes
  (use-package benchmark-init :demand
    :hook (after-init . (lambda () ; Stop the benchmark and print result after the init.
                    (benchmark-init/deactivate)
                    (message "Loaded in %s" (emacs-init-time))
                    )))
#+end_src

** Extend use-package

Refresh the package list if needed.

#+begin_src emacs-lisp :tangle yes
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

Let use define an external binary as dependency with =:ensure-system-package=.

#+begin_src emacs-lisp :tangle yes
  (use-package use-package-ensure-system-package)
#+end_src

Manage the mode-line with =:delight=.

#+begin_src emacs-lisp :tangle yes
  (use-package delight)
#+end_src

* Global settings
Adjust Emacs default behavior. No packages involved.

** Default layout

Don't display the help screen on startup and disable default scratch message.

#+begin_src emacs-lisp :tangle yes
  (setq inhibit-startup-screen  t
        initial-scratch-message nil)
#+end_src

Disable GUI window decorations.

#+begin_src emacs-lisp :tangle yes
  (tool-bar-mode   -1)
  ;(scroll-bar-mode -1)
  (unless window-system (menu-bar-mode -1))
#+end_src

Disable the bell.

#+begin_src emacs-lisp :tangle yes
  (setq ring-bell-function 'ignore)
#+end_src

Show trailing whitespaces in prog mode.

#+begin_src emacs-lisp :tangle yes
  (setq-default truncate-lines        t
                require-final-newline t)
  (add-hook 'prog-mode-hook '(lambda() (setq show-trailing-whitespace t)))
#+end_src

Truncate long tines instead of wrapping and ensure the final newline.

#+begin_src emacs-lisp :tangle yes
  (setq-default truncate-lines        t
                require-final-newline t)
#+end_src

Define sane indentation.

#+begin_src emacs-lisp :tangle yes
  (setq-default indent-tabs-mode nil
                tab-width        8)
#+end_src

Enable syntax highlight and highlight parens.

#+begin_src emacs-lisp :tangle yes
  (setq font-lock-maximum-decoration t)
  (global-font-lock-mode t)
  (show-paren-mode t)
#+end_src

Show line/column in the mode-line.

#+begin_src emacs-lisp :tangle yes
  (column-number-mode t)
  (line-number-mode t)
#+end_src

Create a region when creating a mark.

#+begin_src emacs-lisp :tangle yes
  (transient-mark-mode t)
#+end_src

Enable the mouse support in the terminal.

#+begin_src emacs-lisp :tangle yes
  (unless window-system
    (xterm-mouse-mode t)
    (global-set-key (kbd "<mouse-4>") (lambda() (interactive) (scroll-down 5)))
    (global-set-key (kbd "<mouse-5>") (lambda() (interactive) (scroll-up 5))))
#+end_src

Keep track of the window layouts.

#+begin_src emacs-lisp :tangle yes
  (winner-mode t)
#+end_src

Don't automatically enable eldoc.

#+begin_src emacs-lisp :tangle yes
  (global-eldoc-mode -1)
#+end_src

*** Bindings                                                     :bindings:

Use =super= for copy/paste and undo to make for a better integration with windows/OSX.

#+begin_src emacs-lisp :tangle yes
  (bind-key "s-x" 'kill-region)
  (bind-key "s-c" 'kill-ring-save)
  (bind-key "s-v" 'yank)
  (bind-key "s-z" 'undo)
#+end_src

Set globally comment/uncomment.

#+begin_src emacs-lisp :tangle yes
  (bind-key "C-c C-c" 'comment-region)
  (bind-key "C-c C-u" 'uncomment-region)
#+end_src

Quickly toggle the line numbers in the margin.

#+begin_src emacs-lisp :tangle yes
  (bind-key "C-c C-l" 'display-line-numbers-mode)
#+end_src

** Backup / History

Store all backup and temporary files in =~/.emacs.d/.tmp= instead of polluting the current directory.

Define the target directories and create them if they don't exist.

#+begin_src emacs-lisp :tangle yes
  (setq backup-dir     "~/.emacs.d/.tmp/backup"
        auto-saves-dir "~/.emacs.d/.tmp/auto-saves/")
  (dolist (dir (list backup-dir auto-saves-dir))
    (when (not (file-directory-p dir))
      (make-directory dir t)))
#+end_src

Tell emacs to use those directories instead of the local one.

#+begin_src emacs-lisp :tangle yes
  (setq backup-directory-alist         `(("." . ,backup-dir))
        auto-save-file-name-transforms `((".*" ,auto-saves-dir t))
        auto-save-list-file-prefix     (concat auto-saves-dir ".saves-")
        tramp-backup-directory-alist   `((".*" . ,backup-dir))
        tramp-auto-save-directory      auto-saves-dir)
#+end_src

Define how to hanlde automatic bakcups / open files.

#+begin_src emacs-lisp :tangle yes
  (setq create-lockfiles nil           ; Don't create lockfiles when editing a file.
        backup-by-copying t            ; Don't delink hardlinks.
        delete-old-versions t          ; Clean up the backups.
        version-control t              ; Use version numbers on backups.
        kept-new-versions 5            ; Keep some new versions
        kept-old-versions 2)           ; and some old ones, too.
#+end_src

Keep track of recent files.

#+begin_src emacs-lisp :tangle yes
  (setq recentf-exclude '(".*/.emacs.d/.*" ".*/go/pkg/mod/.*"))
  (recentf-mode t)
#+end_src

** Disable customize settings outside config file

Create a file in =~/.emacs.d= with the customization done outside the config file instead of overwriting =~/.emacs=.

#+begin_src emacs-lisp :tangle yes
  (setq custom-file "~/.emacs.d/custom.el")
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src

** Prompts shortcuts

Allow to use y/n instead of "yes"/"no".

#+begin_src emacs-lisp :tangle yes
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

Skip the prompt when opening symlinks.

#+begin_src emacs-lisp :tangle yes
  (setq vc-follow-symlinks t)
#+end_src

* Editing
Setup the general edit config.

** EditorConfig

Use editor config to handle basic settings like encoding, line lengths, etc.
See [[file:../.editorconfig][global editorconfig]] for more details.

#+begin_src emacs-lisp :tangle yes
  (use-package editorconfig :delight
    :config (editorconfig-mode t))
#+end_src

** Undo tree

=undo-tree= visualises undo history as a tree for easy navigation.

Enable undo history and store it in =~/.emacs=.

#+begin_src emacs-lisp :tangle yes
  (setq undo-tree-auto-save-history t
        undo-tree-history-directory-alist '((".*" . "~/.emacs.d/.tmp")))
#+end_src

#+begin_src emacs-lisp :tangle yes
  (use-package undo-tree :delight
    :config (global-undo-tree-mode t))
#+end_src

** Which Key
Show the available next key bindings.

#+begin_src emacs-lisp :tangle yes
  (use-package which-key :delight
    :config (which-key-mode t))
#+end_src

** Spellcheck

#+begin_src emacs-lisp :tangle yes
  (use-package flyspell :delight
    :ensure-system-package aspell
    :hook
    ((org-mode yaml-mode markdown-mode git-commit-mode) . flyspell-mode)
    (prog-mode . flyspell-prog-mode)
    (before-save-hook . flyspell-buffer)
    :custom
    (flyspell-issue-message-flag nil)
    (ispell-program-name "aspell")
    (ispell-extra-args '("--sug-mode=ultra" "--lang=en_US" "--run-together"))
    :config (use-package flyspell-correct-ivy
      :bind ("C-M-:" . flyspell-correct-at-point)
      :config (setq flyspell-correct-interface #'flyspell-correct-ivy)))
#+end_src

* Autocomplete
** LSP

#+begin_src emacs-lisp :tangle yes
  (use-package lsp-mode :delight " LSP"
    :custom
    (lsp-file-watch-ignored '(
               "[/\\\\].git$"
               "[/\\\\]infrastructure$"
               "[/\\\\]vendor$"
               "[/\\\\]cli$"
               "[/\\\\]internal$"
               "[/\\\\]e2e$"
               "[/\\\\]functions[/\\\\]migrations$"
               "[/\\\\]tests[/\\\\]mocks$"
               "[/\\\\]\\.gocache$"
               "[/\\\\]_archives$"
               "[/\\\\]node_modules$"
               ))
    (lsp-prefer-flymake nil)                     ;; Disable flymake in favor of flycheck.
    (lsp-eldoc-enable-hover nil)                 ;; Disable eldoc. Redundant with lsp-ui-doc.
    (lsp-gopls-build-flags ["-tags=wireinject"]) ;; Use wire build tag.
    :config
    (lsp-register-custom-settings '(
                                     ("gopls.completeUnimported" t t)
                                     ("gopls.staticcheck" t t)
                                     ))
    (use-package lsp-ui ;; Overlay UI components for LSP.
      :preface
      (defun creack/toggle-lsp-ui-doc ()
        (interactive)
        (if lsp-ui-doc-mode
          (progn
            (lsp-ui-doc-mode -1)
            (lsp-ui-doc--hide-frame))
          (lsp-ui-doc-mode 1)))

      :custom
      (lsp-ui-doc-position       'top)
      (lsp-ui-doc-header         nil)
      (lsp-ui-doc-use-childframe t)
      (lsp-ui-doc-use-webkit     t)
      (lsp-ui-doc-enable         t)

      :bind
      (:map lsp-ui-flycheck-list-mode-map ;; Fix the terminal mode bindings.
        ("RET"     . lsp-ui-flycheck-list--view)
        ("TAB"     . lsp-ui-flycheck-list--visit)
        ("C-c l"   . lsp-ui-flycheck-list--quit)
        )
      (:map lsp-ui-mode-map
        ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
        ([remap xref-find-references]  . lsp-ui-peek-find-references)
        ("C-c d"   . creack/toggle-lsp-ui-doc)
        ("C-c C-d" . creack/toggle-lsp-ui-doc)
        )
      )
    )
#+end_src

** Company

#+begin_src emacs-lisp :tangle yes
  (use-package company :defer :delight
    :bind
    (:map company-active-map
     ("C-n" . company-select-next)
     ("C-p" . company-select-previous)
     ("<tab>" . company-complete-common-or-cycle)
     :map company-search-map
     ("C-p" . company-select-previous)
     ("C-n" . company-select-next))

    :custom
    ;(company-echo-delay 0)
    (company-idle-delay 0)                ;; Show company right away when prefix match.
    (company-minimum-prefix-length 1)     ;; Show company after the first char typed.
    (company-tooltip-align-annotations t) ;; Align the completion popu.
    (company-show-numbers t)              ;; Easy navigation to candidates with M-<n>.
    (company-dabbrev-downcase nil)        ;; Don't worry about case.

    :hook
    (after-init . global-company-mode)

    :config
    ;; Show quick tooltip
    (use-package company-quickhelp
      :defines company-quickhelp-delay
      :bind (:map company-active-map
              ("M-h" . company-quickhelp-manual-begin))
      :hook (global-company-mode . company-quickhelp-mode)
      :custom (company-quickhelp-delay 0.3))

    ;; Lsp completion
    (use-package company-lsp
      :custom
      (company-lsp-cache-candidates t) ;; auto, t(always using a cache), or nil
      (company-lsp-async t)
      (company-lsp-enable-snippet t)
      (company-lsp-enable-recompletion t)))
#+end_src

* Navigation
** Projectile

Use Projectile for workspace management.

#+begin_src emacs-lisp :tangle yes
  (use-package projectile
    :config (projectile-mode +1)
    :delight '(:eval (concat " <" (projectile-project-name) ">")))
#+end_src

** Ivy

=Ivy= is a generic completion framework which uses the minibuffer.
Turning on =ivy-mode= enables replacement of lots of built in =ido= functionality.

Add recent files and window layouts to the switch buffer list.

#+begin_src emacs-lisp :tangle yes
  (setq ivy-use-virtual-buffers t)
#+end_src

Hide . and .. in file list.

#+begin_src emacs-lisp :tangle yes
  (setq ivy-extra-directories nil)
#+end_src

Keep swiper centered.

#+begin_src emacs-lisp :tangle yes
  (setq swiper-action-recenter t)
#+end_src

Install =Ivy= and friends.

#+begin_src emacs-lisp :tangle yes
  (use-package ivy :delight
    :config (ivy-mode t))
#+end_src

=counsel= is a collection of =ivy= enhanced versions of common Emacs commands.

#+begin_src emacs-lisp :tangle yes
  (use-package counsel :delight :after ivy
    :config (counsel-mode t))
#+end_src

=ivy-rich= extends ivy and provides an interface with more details.

#+begin_src emacs-lisp :tangle yes
  (use-package ivy-rich :after ivy counsel
    :custom
    (ivy-rich-path-style    'abbrev)
    (ivy-virtual-abbreviate 'full)
    :config (ivy-rich-mode t))
#+end_src

=prescient= sorts and filters candidate lists for ivy/counsel.

#+begin_src emacs-lisp :tangle yes
  (use-package prescient :after ivy
    :config (prescient-persist-mode t))
  (use-package ivy-prescient :after prescient
    :config (ivy-prescient-mode t))
#+end_src

=swiper= is an =ivy= enhanced version of isearch.

#+begin_src emacs-lisp :tangle yes
  (use-package swiper)
#+end_src

*** Bindings                                                       :bindings:

#+begin_src emacs-lisp :tangle yes
  (bind-keys
    ("C-c v p" . ivy-push-view)
    ("C-c v o" . ivy-pop-view)
    ("C-c v ." . ivy-switch-view)
    ("C-s"     . counsel-grep-or-swiper))
  (bind-keys :map ivy-minibuffer-map
      ("C-j" . ivy-immediate-done)
      ("RET" . ivy-alt-done))

#+end_src

** Multiple Cursor

Enable multiple cursors support.

#+begin_src emacs-lisp :tangle yes
(use-package multiple-cursors
  :bind
  ("M-n"         . mc/mark-next-like-this)         ;; Add new cursor with matching region.
  ("M-p"         . mc/mark-previous-like-this)     ;; Add new cursor with matching region.
  ("M-]"         . mc/mark-all-like-this)          ;; Add new cursor with matching region.
  ("C-c SPC"     . set-rectangular-region-anchor)  ;; Rectangular region with many cursors.
  ("M-SPC"       . set-rectangular-region-anchor)  ;; Rectangular region with many cursors.
  )
#+end_src

* Appearance
** Theme

Install and enable the theme.

#+begin_src emacs-lisp :tangle no
  (use-package nord-theme
    :config (load-theme 'nord t))
#+end_src

#+begin_src emacs-lisp :tangle yes
  (use-package monokai-theme
    :config (load-theme 'monokai t))
#+end_src

#+begin_src emacs-lisp :tangle no
  (use-package monokai-pro-theme :defer
    :init (load-theme 'monokai-pro t))
#+end_src

In terminal mode, use a full size vertical bar for splits.

#+begin_src emacs-lisp :tangle yes
  (unless window-system
    (set-display-table-slot standard-display-table 'vertical-border (make-glyph-code ?│)))
#+end_src

** Font

Using fira code for ligatures.

Install the font on debian/ubuntu.

#+begin_src sh :tangle no
  sudo apt-get install fonts-firacode
#+end_src

Install the font on osx.

#+begin_src sh :tangle no
  brew tap homebrew/cask-fonts
  brew cask install font-fira-code
#+end_src

Enable the font in emacs.

#+begin_src emacs-lisp :tangle yes
  ;(set-face-attribute 'default nil :font "Fira Code-12")
  (set-frame-font "Fira Code 12" nil t)
#+end_src

Use a different font for the mode line.

#+begin_src emacs-lisp :tangle yes
  (set-face-attribute 'mode-line nil :font "DejaVu Sans Mono-8")
#+end_src

Enable ligatures in GUI mode.

#+begin_src emacs-lisp :tangle yes
  (use-package fira-code-mode :when window-system
    :custom
    (fira-code-mode-disabled-ligatures '(":" "[]" "#{" "#(" "#_" "#_(" "x")) ; List of ligatures to turn off
    :hook (prog-mode . fira-code-mode))
#+end_src

** Mode Line

=feebleline= is a minimalist mode line replacement.

#+begin_src emacs-lisp :tangle no
  (use-package feebleline
    :config (feebleline-mode 't))
#+end_src

* TODO Coding
** Compilation

Don't ask about killing current process before restarting and enable scrolling in the output buffer.

#+begin_src emacs-lisp :tangle yes
  (setq compilation-always-kill   t
        compilation-scroll-output t)
#+end_src

Use proper ansi colors in the output buffer.

#+begin_src emacs-lisp :tangle yes
  (setq compilation-environment '("TERM=xterm-truecolor" "COLORTERM=truecolor"))
#+end_src

Use the =xterm-color= package to replace the native ansi.el to have better support for colors.

#+begin_src emacs-lisp :tangle yes
  (use-package xterm-color
    :preface
    (defun my/compilation-color (proc)
      ;; We need to differentiate between compilation-mode buffers
      ;; and running as part of comint.
      (when (eq (process-filter proc) 'compilation-filter)
        ;; This is a process associated with a compilation-mode buffer.
        ;; We may call `xterm-color-filter' before its own filter function.
        (set-process-filter
         proc
         (lambda (proc string)
           (funcall 'compilation-filter proc
                    (xterm-color-filter string))))))
    :hook (compilation-start . my/compilation-color))
#+end_src

*** Bindings                                                     :bindings:

Create bindings to quickly recompile and kill the running command.

#+begin_src emacs-lisp :tangle yes
  (bind-key "C-c r" '(lambda() (interactive) (save-some-buffers t) (recompile)))
  (bind-key "C-c k" 'kill-compilation)
#+end_src

** Programming specific interface improvements

When programming I like my editor to try to help me with keeping parentheses balanced.

#+begin_src emacs-lisp :tangle no
  (use-package smartparens
    :hook (prog-mode . smartparens-mode))
#+end_src

Highlight parens etc. for improved readability.

#+begin_src emacs-lisp :tangle yes
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

Highlight strings which represent colours. I only want this in programming modes, and I don't want colour names to be highlighted (=x-colors=).

#+begin_src emacs-lisp :tangle yes
  (use-package rainbow-mode
    :custom (rainbow-x-colors nil)
    :hook (prog-mode . rainbow-mode))
#+end_src

Expand parentheses for me.

#+begin_src emacs-lisp :tangle no
  (add-hook 'prog-mode-hook 'electric-pair-mode)
#+end_src

** Git

=git-timemachine= steps through historic versions of git controlled file.

#+begin_src emacs-lisp :tangle yes
  (use-package git-timemachine
    :bind ("M-g t" . git-timemachine-toggle))
#+end_src


=Magit= is an interface to git. Summon it with =C-x g=.

#+begin_src emacs-lisp :tangle yes
  (use-package magit
    :bind ("M-g s" . magit-status))
#+end_src

Display line changes in gutter based on git history. Enable it everywhere.

#+begin_src emacs-lisp :tangle yes
  ;(use-package git-gutter-fringe
  ;  :config (global-git-gutter-mode t))
#+end_src

** Syntax checking

=Flycheck= is a general linter framework which other packages hook into. It's an improvment on the built in =flymake=.

#+begin_src emacs-lisp :tangle yes
  (use-package flycheck
    :bind
    ("C-c <up>"   . flycheck-next-error)      ; Ctrl-up   to go to next error.
    ("C-c <down>" . flycheck-previous-error)) ; Ctrl-down to go to previous error.
#+end_src

** Snippets

Unlike autocomplete which suggests words / symbols, snippets are pre-prepared templates which you fill in.

Type the shortcut and press =TAB= to complete, or =M-/= to autosuggest a snippet.

#+begin_src emacs-lisp :tangle yes
  (use-package yasnippet
    :delight yas-minor-mode
    :config
    (add-to-list 'yas-snippet-dirs "~/.dotfiles/.emacs.files/yasnippet")
    (yas-global-mode t))
#+end_src

Install the default snippets.

#+begin_src emacs-lisp :tangle yes
  (use-package yasnippet-snippets)
#+end_src

* Major Modes
** Config Files

Common config file formats.

#+begin_src emacs-lisp :tangle yes
  (use-package ini-mode :defer)
  (use-package ssh-config-mode :defer)
  (use-package conf-mode :defer
    :mode (("\\.conf\\'"    . conf-space-mode)
           ("\\.setup.*\\'" . conf-space-mode)))
#+end_src

JSON/Yaml.

#+begin_src emacs-lisp :tangle yes
  (use-package json-mode :defer)
  (use-package yaml-mode :defer
    :hook (yaml-mode . display-line-numbers-mode))
#+end_src

** Git

#+begin_src emacs-lisp :tangle yes
  (use-package gitattributes-mode :defer)
  (use-package gitconfig-mode :defer)
  (use-package gitignore-mode :defer)
#+end_src

** Markdown

Markdown support isn't built into Emacs, add it with =markdown-mode=.

#+begin_src emacs-lisp :tangle yes
  (use-package markdown-mode :defer
    :commands (markdown-mode gfm-mode)
    :mode "\\.md\\'")
#+end_src

Use =grip= for live preview in browser.

#+begin_src emacs-lisp :tangle yes
  (use-package grip-mode
    :ensure-system-package (grip . "pip3 install grip")
    :bind (:map markdown-mode-command-map
           ("g" . grip-mode)))
#+end_src

** Docker

#+begin_src emacs-lisp :tangle yes
  (use-package dockerfile-mode :defer
    :mode "Dockerfile" "\\'Dockerfile."
    :hook (dockerfile-mode . display-line-numbers-mode))
  (use-package docker-compose-mode)
#+end_src

** Plantuml

=PlantUML= is used to create diagrams and graphs.

Automatically downloads the jar the frist time it is used.

#+begin_src emacs-lisp :tangle yes
  (use-package plantuml-mode :defer
    :ensure-system-package java
    :custom
    (plantuml-jar-path "~/.emacs.d/plantuml.jar")
    (plantuml-default-exec-mode 'jar)
    :mode ("\\.puml\\'" "\\.uml\\'")
    :config
    (unless (file-exists-p plantuml-jar-path)
      (plantuml-download-jar)))
#+end_src

** Makefile

Hook =*.mk= to Makefile mode.

#+begin_src emacs-lisp :tangle yes
  (use-package makefile-mode :defer :ensure nil
    :mode "Makefile" "\\.mk\\'"
    :hook (makefile-mode . display-line-numbers-mode))
  #+end_src

** Cucumber / Gherkin Feature

Install the major mode to work with feature files.

#+begin_src emacs-lisp :tangle yes
  (use-package feature-mode :defer)
#+end_src

** Protobuf

Install the major mode for protobuf and set the basic code style.

#+begin_src emacs-lisp :tangle yes
  (use-package protobuf-mode
    :hook
    (protobuf-mode . (lambda() (c-add-style "pbstyle" '((c-basic-offset . 2) (indent-tabs-mode . nil)) t)))
    (protobuf-mode . display-line-numbers-mode)
    (protobuf-mode . yas-minor-mode))
#+end_src

** Terraform

Enable Terraform major mode with snippet support.

#+begin_src emacs-lisp :tangle yes
  (use-package terraform-mode :defer
    :hook (terraform-mode . yas-minor-mode))
#+end_src

** TODO Golang

Enable =guru= support.

#+begin_src emacs-lisp :tangle yes
  (use-package go-guru)
#+end_src

Go setup.

#+begin_src emacs-lisp :tangle yes
  (use-package go-mode
    :ensure-system-package
    (gopls . "cd /tmp && GO111MODULE=on go get golang.org/x/tools/gopls@latest")

    :preface
    ;; Compilation helper funcs.
    (defun go-save-and-compile-program()
      "Save any unsaved buffers and compile."
      (interactive)
      (save-some-buffers t)
      (compile "sh -c 'go build -o /tmp/a.out && /tmp/a.out'")
      )
    (defun go-save-and-go-generate()
      (interactive)
      (save-some-buffers t)
      (compile "go generate")
      )
    (defun go-save-and-wire()
      (interactive)
      (save-some-buffers t)
      (compile "wire")
      )
    (defun go-save-and-vendor()
      (interactive)
      (save-some-buffers t)
      (compile "sh -c 'go mod tidy && go mod vendor'")
      )
    (defun go-save-and-test-program()
      "Save any unsaved buffers and compile."
      (interactive)
      (save-some-buffers t)
      (compile "go test -v -cover -coverprofile=/tmp/coverprofile -covermode=count")
      )

    :bind
    (:map go-mode-map
      ([mouse-8] . xref-pop-marker-stack)
      ([mouse-9] . godef-jump)
      ("TAB"     . company-indent-or-complete-common)
      ("C-c e"   . lsp-rename)
      ("C-c f"   . go-save-and-compile-program)
      ("C-c g"   . go-save-and-go-generate)
      ("C-c w"   . go-save-and-wire)
      ("C-c i"   . gofmt)
      ("C-c t"   . go-save-and-test-program)
      ("C-c c"   . (lambda() (interactive) (go-coverage "/tmp/coverprofile")))
      ([remap godef-describe]          . lsp-describe-thing-at-point)
      ([remap godef-jump]              . lsp-ui-peek-find-implementation)
      ([remap godef-jump-other-window] . go-guru-definition-other-window)
      ([remap go-rename]               . lsp-rename)
      )

    :config
    (setq
      gofmt-command           "goimports"            ;; Use goimprots instead of gofmt.
      gofmt-args              (quote ("-local=bitbucket.org/mlcloud,github.magicleap.com"))
      gofmt-show-errors       nil                    ;; Don't show errors. Use LSP instead.
      lsp-clients-go-library-directories (quote ("~/go/pkg/mod" ;; Ignore stdlib, go mod cache and go path from LSP.
                                                  "~/goroot"
                                                  "~/go"
                                                  "~/go/src/google.golang.org"
                                                  "~/go/src/golang.org"
                                                  "~/go/src/gopkg.in"
                                                  ))
      )

    :hook
    (go-mode     . lsp)                          ;; Load LSP.
    (go-mode     . yas-minor-mode)               ;; Enable yas.
    (before-save . (lambda()             ;; Format the code with LSP before save.
      (when (eq major-mode 'go-mode)
        (lsp-format-buffer)
        (lsp-organize-imports))))         ;; Let LSP handle imports.
    )
#+end_src

* TODO Org

I should comment on these more...

#+begin_src emacs-lisp :tangle yes
  (setq org-startup-indented 'f)
  (setq org-directory "~/org")
  (setq org-special-ctrl-a/e 't)
  (setq org-default-notes-file (concat org-directory "/notes.org"))
  ;; (define-key global-map "\C-cc" 'org-capture)
  (setq org-src-fontify-natively 't)
  (setq org-src-tab-acts-natively t)
  (setq org-src-window-setup 'current-window)
#+end_src


#+begin_src emacs-lisp :tangle yes
  (use-package org)
   ; :ensure org-plus-contrib)
  (use-package ox-hugo
    :after ox)
#+end_src

Customize appearance.

#+begin_src emacs-lisp :tangle no
  (let*
      ((base-font-color     (face-foreground 'default nil 'default))
       (headline           `(:foreground ,base-font-color)))

    (custom-theme-set-faces 'user
                            `(org-level-8 ((t (,@headline))))
                            `(org-level-7 ((t (,@headline))))
                            `(org-level-6 ((t (,@headline))))
                            `(org-level-5 ((t (,@headline))))
                            `(org-level-4 ((t (,@headline))))
                            `(org-level-3 ((t (,@headline :height 1.3))))
                            `(org-level-2 ((t (,@headline :height 1.3))))
                            `(org-level-1 ((t (,@headline :height 1.3 ))))
                            `(org-document-title ((t (,@headline :height 1))))))
#+end_src

#+begin_src emacs-lisp :tangle no
 (use-package ob-elvish)
 (use-package ob-cfengine3)
 (use-package diminish)
 (use-package org
    :ensure org-plus-contrib
    :bind
    (:map org-mode-map
          ("C-c l" . org-store-link)
          ("A-h" . org-mark-element)
          ("C-a" . org-beginning-of-line)
          ("C-e" . org-end-of-line)
          ("C-k" . org-kill-line))
    :custom
      (org-directory "~/org")
      (org-log-done t)
      (org-startup-indented t)
      (org-log-into-drawer t)
      (org-special-ctrl-a/e t)
      (org-special-ctrl-k t)
      (org-use-speed-commands
       (lambda ()
         (and (looking-at org-outline-regexp)
              (looking-back "^\**"))))
      (org-confirm-babel-evaluate nil)
      (org-src-fontify-natively t)
      (org-src-tab-acts-natively t)
      (org-hide-emphasis-markers t)
      (org-fontify-done-headline t)
      (org-tags-column 0)
      (org-todo-keyword-faces
       '(("AREA"         . "DarkOrchid1")
         ("[AREA]"       . "DarkOrchid1")
         ("PROJECT"      . "DarkOrchid1")
         ("[PROJECT]"    . "DarkOrchid1")
         ("INBOX"        . "cyan")
         ("[INBOX]"      . "cyan")
         ("PROPOSAL"     . "orange")
         ("[PROPOSAL]"   . "orange")
         ("DRAFT"        . "yellow3")
         ("[DRAFT]"      . "yellow3")
         ("INPROGRESS"   . "yellow4")
         ("[INPROGRESS]" . "yellow4")
         ("MEETING"      . "purple")
         ("[MEETING]"    . "purple")
         ("CANCELED"     . "blue")
         ("[CANCELED]"   . "blue")))
      (prettify-symbols-unprettify-at-point 'right-edge)
    :custom-face
      (variable-pitch ((t (:family "ETBembo" :height 180 :weight thin))))
      ;;(variable-pitch ((t (:family "Avenir Next" :height 160 :weight light))))
      (fixed-pitch ((t (:family "Inconsolata Nerd Font"))))
      (org-indent ((t (:inherit (org-hide fixed-pitch)))))
      (org-done ((t (:foreground "PaleGreen"
                                 :strike-through t))))
    :hook
      (org-mode . (lambda () (add-hook 'after-save-hook 'org-babel-tangle :append :local)))
      (org-babel-after-execute . org-redisplay-inline-images)
      (org-mode . visual-line-mode)
      (org-mode . variable-pitch-mode)
      (org-mode . (lambda ()
                    "Beautify Org Checkbox Symbol"
                    (push '("[ ]" . "☐" ) prettify-symbols-alist)
                    (push '("[X]" . "☑" ) prettify-symbols-alist)
                    (push '("[-]" . "⊡" ) prettify-symbols-alist)
                    (prettify-symbols-mode)))
    :config
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((cfengine3 . t)
         (ruby      . t)
         (latex     . t)
         (plantuml  . t)
         (python    . t)
         (shell     . t)
         (elvish    . t)
         (calc      . t)
         (dot       . t)
         (ditaa     . t)
         (org       . t)))
      (font-lock-add-keywords
       'org-mode
       '(("^ *\\([-]\\) "
          (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
      (let* ((variable-tuple
              (cond ((x-list-fonts   "ETBembo")         '(:font   "ETBembo"))
                    ((x-list-fonts   "Source Sans Pro") '(:font   "Source Sans Pro"))
                    ((x-list-fonts   "Lucida Grande")   '(:font   "Lucida Grande"))
                    ((x-list-fonts   "Verdana")         '(:font   "Verdana"))
                    ((x-family-fonts "Sans Serif")      '(:family "Sans Serif"))
                    (nil (warn "Cannot find a Sans Serif Font."))))
             (base-font-color (face-foreground 'default nil 'default))
             (headline `(:inherit default :weight bold
                                  :foreground ,base-font-color)))

        (custom-theme-set-faces
         'user
         `(org-level-8        ((t (,@headline ,@variable-tuple))))
         `(org-level-7        ((t (,@headline ,@variable-tuple))))
         `(org-level-6        ((t (,@headline ,@variable-tuple))))
         `(org-level-5        ((t (,@headline ,@variable-tuple))))
         `(org-level-4        ((t (,@headline ,@variable-tuple :height 1.1))))
         `(org-level-3        ((t (,@headline ,@variable-tuple :height 1.25))))
         `(org-level-2        ((t (,@headline ,@variable-tuple :height 1.5))))
         `(org-level-1        ((t (,@headline ,@variable-tuple :height 1.75))))
         `(org-headline-done  ((t (,@headline ,@variable-tuple :strike-through t))))
         `(org-document-title ((t (,@headline ,@variable-tuple
                                              :height 2.0 :underline nil))))))
      (eval-after-load 'face-remap '(diminish 'buffer-face-mode))
      (eval-after-load 'simple '(diminish 'visual-line-mode))
      (defface org-checkbox-done-text
        '((t (:foreground "#71696A" :strike-through t)))
        "Face for the text part of a checked org-mode checkbox.")

      (font-lock-add-keywords
       'org-mode
       `(("^[ \t]*\\(?:[-+*]\\|[0-9]+[).]\\)[ \t]+\\(\\(?:\\[@\\(?:start:\\)?[0-9]+\\][ \t]*\\)?\\[\\(?:X\\|\\([0-9]+\\)/\\2\\)\\][^\n]*\n\\)"
          1 'org-checkbox-done-text prepend))
       'append))

  (use-package org-indent
    :ensure nil
    :diminish
    :custom
    (org-indent-indentation-per-level 4))
#+end_src

** Exporters

*** Markdown

Export to Github Flavored Markdown.

#+begin_src emacs-lisp :tangle yes
  (use-package ox-gfm)
#+end_src

* TODO Extra
** Record key frequency

Keep track of what gets used so we can drop unused features.

#+begin_src emacs-lisp :tangle yes
  (use-package keyfreq
    :commands keyfreq
    :config
    (keyfreq-mode t)
    (keyfreq-autosave-mode t))
#+end_src

** SSH Agent

From https://github.com/nhoffman/.emacs.d/blob/master/init.org

Set the ssh-agent to the most recent socket in  =/tmp/ssh-*=.

#+begin_src emacs-lisp :tangle yes
  (defun my/ssh-refresh ()
    "Reset the environment variable SSH_AUTH_SOCK"
    (interactive)
    (let (ssh-auth-sock-old (getenv "SSH_AUTH_SOCK"))
      (setenv "SSH_AUTH_SOCK"
              (car (split-string
                    (shell-command-to-string
                     "ls -t $(find /tmp/ssh-* -group $USER -name 'agent.*' 2> /dev/null) | head -1"))))
      (message
       (format "SSH_AUTH_SOCK %s --> %s"
               ssh-auth-sock-old (getenv "SSH_AUTH_SOCK")))))
#+end_src

Reload ssh agent now and env every 10 minutes.

#+begin_src emacs-lisp :tangle yes
(run-with-timer 0 (* 60 10) 'my/ssh-refresh)
#+end_src

** TODO Emacs server

#+begin_src emacs-lisp :tangle no
(add-hook 'after-make-frame-functions
          (lambda (frame)
            (select-frame frame)
            (my/setup-color-theme)))
#+end_src
